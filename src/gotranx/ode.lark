?start: ode

?ode: (parameters | states | expressions | comment) *
?parameter: NAME "=" SIGNED_NUMBER  -> param
    | NAME "=" "ScalarParam" "(" SIGNED_NUMBER ["," "unit" "=" UNIT_STR] ["," "description" "=" DESCRIPTION] ")" -> scalarparam

?assignment : VARIABLE "=" expression [ unit ]
?unit: "#" UNIT

comment : ("#" /.+/)+
parameters : "parameters" "(" [ COMPONENT_NAME "," ] parameter ("," parameter)*  ")"
states : "states" "(" [ COMPONENT_NAME "," ] [ INFO ","] parameter ("," parameter)* ")"
expressions: (assignment)+
    | "expressions" "(" COMPONENT_NAME [ "," INFO ] ")" (assignment)+
    | "component" "(" COMPONENT_NAME [ "," INFO ] ")" (assignment)+


?expression: multiplyingexpression
    | expression "+" multiplyingexpression -> add
    | expression "-" multiplyingexpression -> sub

?multiplyingexpression: powexpression
    | multiplyingexpression "*" powexpression -> mul
    | multiplyingexpression "/" powexpression -> div

?powexpression: signedatom
    | signedatom "**" signedatom -> pow

?signedatom: SIGN signedatom
    | func
    | logicalfunc
    | atom

?atom: scientific
    | variable
    | constant
    | "(" expression ")"

scientific: SCIENTIFIC_NUMBER
constant: PI
    | EULER
    | I
variable: VARIABLE
?func: funcname "(" expression ("," expression)* ")"
?funcname: COS
    | TAN
    | SIN
    | ACOS
    | ATAN
    | ASIN
    | LOG
    | LN
    | SQRT
    | EXP
    | ABS
    | FLOOR

?logicalfunc: logicalfuncname "(" expression ("," expression)* ")"
?logicalfuncname: CONDITIONAL
    | LT
    | GT
    | LE
    | GE
    | AND
    | OR

CONDITIONAL: "Conditional"
EXP: "exp"
COS: "cos"
SIN: "sin"
TAN: "tan"
ACOS: "acos"
ASIN: "asin"
ATAN: "atan"
ABS: "abs"
FLOOR: "floor"
LN: "ln"
LOG: "log"
SQRT: "sqrt"
GT: "Gt"
LT: "Lt"
GE: "Ge"
LE: "Le"
AND: "And"
OR: "Or"


POINT: "."
POW: "^"
PI: "pi"
EULER: E2
I: "i"
VARIABLE: VALID_ID_START VALID_ID_CHAR*
VALID_ID_START: "a".."z"|"A".."Z"|"_"
VALID_ID_CHAR: VALID_ID_START | ("0".."9")
SCIENTIFIC_NUMBER: NUMBER ((E1 | E2) SIGN? NUMBER)?
E1: "E"
E2: "e"
SIGN: "+" | "-"
NEG: "-"


COMPONENT_NAME: ESCAPED_STRING
INFO: ESCAPED_STRING
DESCRIPTION: ESCAPED_STRING
UNIT_STR: ESCAPED_STRING
UNIT: NAME ("*" | "**" SIGN? NUMBER |NAME)*

%ignore WS
%ignore WS_INLINE

%import common.CNAME -> NAME
%import common.NUMBER
%import common.SIGNED_NUMBER
%import common.WS
%import common.NEWLINE
%import common.WS_INLINE
%import common.ESCAPED_STRING
